---
import { getCollection } from "astro:content";
import { getImage } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import FullScreenPhoto from "@components/FullScreenPhoto.astro";

export async function getStaticPaths() {
  const allPhotos = await getCollection("otherPictures");
  const sortedPhotos = allPhotos.sort(
    (a, b) =>
      new Date(b.data.date_taken as Date).getTime() -
      new Date(a.data.date_taken as Date).getTime()
  );

  const photos = sortedPhotos.map((photo) => ({
    id: photo.id,
    url_o: photo.data.imageUrls.original?.url as string,
    title: photo.data.title,
    date_taken: photo.data.date_taken as Date,
    description: photo.data.description || "",
    width_o: photo.data.imageUrls.original?.width as number,
    height_o: photo.data.imageUrls.original?.height as number,
    latitude: photo.data.latitude,
    longitude: photo.data.longitude,
    locationName: (photo.data as { locationName?: string }).locationName,
    tags: (photo.data as { tags?: string[] }).tags || [],
    exif: photo.data.exif as Record<
      string,
      {
        value: string;
        clean?: string;
        raw?: string;
      }
    >,
  }));

  return photos.map((photo, index) => ({
    params: { id: photo.id },
    props: {
      currentPhoto: photo,
      photoIndex: index,
      photos,
      prevId: index > 0 ? photos[index - 1].id : null,
      nextId: index < photos.length - 1 ? photos[index + 1].id : null,
    },
  }));
}

const { currentPhoto, photoIndex, photos, prevId, nextId } = Astro.props;

const optimizedImage = await getImage({
  src: currentPhoto.url_o,
  format: "jpg",
  width: currentPhoto.width_o,
  height: currentPhoto.height_o,
});

const imageStructuredData: any = {
  "@context": "https://schema.org",
  "@type": "ImageObject",
  contentUrl: new URL(optimizedImage.src, Astro.site).href,
  url: new URL(optimizedImage.src, Astro.site).href,
  name: currentPhoto.title,
  description: currentPhoto.description || currentPhoto.title,
  uploadDate: currentPhoto.date_taken.toISOString(),
  datePublished: currentPhoto.date_taken.toISOString(),
  width: currentPhoto.width_o,
  height: currentPhoto.height_o,
  creator: {
    "@type": "Person",
    name: "Alexis LOURS",
  },
  copyrightHolder: {
    "@type": "Person",
    name: "Alexis LOURS",
  },
  copyrightNotice: "© Alexis LOURS. All rights reserved.",
  creditText: "Alexis LOURS",
  encodingFormat: "image/jpeg",
  representativeOfPage: true,
};

imageStructuredData.contentLocation = {
  "@type": "Place",
  geo: {
    "@type": "GeoCoordinates",
    latitude: currentPhoto.latitude,
    longitude: currentPhoto.longitude,
  },
};

const title = "Alexis LOURS - " + currentPhoto.title;
const description = currentPhoto.description;
const ogImage = currentPhoto.url_o;
---

<Layout
  title={title}
  description={description}
  ogImage={ogImage}>
  <Fragment slot="head">
    {
      prevId && (
        <link
          rel="prefetch"
          href={`/other/${prevId}/`}
        />
      )
    }
    {
      nextId && (
        <link
          rel="prefetch"
          href={`/other/${nextId}/`}
        />
      )
    }
    <meta
      name="dc.rights"
      content="© Alexis LOURS. All rights reserved."
    />
    <meta
      name="dc.creator"
      content="Alexis LOURS"
    />
    <script
      type="application/ld+json"
      set:html={JSON.stringify(imageStructuredData)}
    />
  </Fragment>
  <FullScreenPhoto
    currentPhoto={currentPhoto}
    photoIndex={photoIndex}
    totalPhotos={photos.length}
    prevId={prevId}
    nextId={nextId}
    basePath="/other"
    backUrl="/other"
    backLabel="other pictures"
    showLicense={false}
  />
</Layout>
